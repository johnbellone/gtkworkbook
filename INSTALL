GTKWorkbook Installation Information

SUMMARY

	GTKWorkbook currently uses GNU Autotools for the build tool-chain. The
	version of Autotools that ships with CentOS 5.2 (Redhat Enterprise
	Linux 5.4) is 2.59 and that is our minimum requirement. There should be
	absolutely no problem building the project with a newer version. If
	such a problem exists please do not hesitate to report it so we can
	fix it.

DEPENDENCIES

	This project has some dependencies which it needs in order to be
	built properly. They are listed below, along with the versions and
	locations of the project's website for downloadables. 

	GTK 2.12

		This toolkit is required for the build to even start. If you
		do not have this installed you'll most likely have a much
		larger issue than building this project. Depending on your
		distribution of Linux there are different ways to go about
		installing the GTK windowing environment. 

	GLIB 2

		This comes with GTK 2.12, but it listed as a separate 
		requirement to enforce the fact that you need these two before
		you can even think about installing this project.

	GTKEXTRA 2

		This custom widget library is used for the GtkSheet widget
		that is wrapped in libgtkworkbook. The best place to grab this
		is the CVS source tree on the project's sourceforge.net
		website.

		http://gtkextra.cvs.sourceforge.net/viewvc/gtkextra

		NOTE: If you have a newer version of GTK that includes the
		support for Pixman and Cairo you can use the GTKEXTRA 3 branch
		and GTKWorkbook will work perfectly fine. Currently the trunk
		of CentOS (and RHEL) are running GTK/GLIB 2.12 which does not
		have this support natively.

	PIXMAN

		This library is included with newer versions of GTK, but if 
		you are running GTK 2.12 (Cent OS 5.2 or RHEL 5.4) then you
		must download and install this separately before the project
		can compile cleanly.

		http://cairographics.org/releases/

		The newest version should suffice as long as it compiles and
		installs properly.

	LIBCSV

		This third-party library is required for comma-separated files
		to be parsed, read, and written. It is available on the 
		website
		below and the newest version possible will work fine.

		http://sourceforge.net/projects/libcsv/

BUILD PROCESS

	We use a custom build script to copy the compiled binaries (and 
	libraries) into an intermediate staging directory for testing. That 
	directly is <bin> inside of the project's root directory. Therefore, 
	if you are compiling from /home/john/work/gtkworkbook the staging 
	directory will be in /home/john/work/gtkworkbook/bin. This directory 
	is automatically created if it does not exist.
	
	A staging version of this project can be built using the included 
	"build" script by merely running it like the following:

		sh build all

	If you wish you do a clean build you can pass the parameter like so:

		sh build clean all

	If the build process completes successfully a copy of the executables 
	and libraries will be copied into the project's <bin> directory for 
	testing purposes. Note that currently if the build process files the 
	previous build's files will not be removed. 

        E. GNU Autotools

           This is the build tool-chain used which must be available. I have 
	   not come across a version of Linux that does not have this 
	   installed. The code has been tested and successfully built on the 
	   latest version of Ubuntu (9.04) and the current version of CentOS 
	   5.2 and RHEL as of this writing (September 2009). 

BASIC INSTALLATION

	Installing the project is easy as building it. Performing the following
	command will cleanly build and install the files into the system's 
	directory, </usr/local>, and files will be copied into their 
	appropriate locations.

		sh build clean install

ADVANCED INSTALLATION

	If you are targeting a specific location for the build files then
	you can manually run <autogen.sh> with the prefix option.

		sh autogen.sh --prefix=[target-location]

	So, for example, if we wanted to install the project in a specific
	directory that exists inside our home.

		sh autogen.sh --prefix=/home/john/gtkworkbook

	Now, the configure script will be recreated as will all of the
	Makefile scripts. You can now perform the BUILD PROCESS and then the
	following command will perform the installation to your target.

		sh build clean install

RUNNING THE APPLICATION

	Now that you have compiled (and in some instances, installed) the
	application you are going to want to execute it to make sure that it
	works properly. Your first step will be to modify the configuration
	file that gets installed.

	The configuration file is located inside of the `cfg' directory inside
	of the project's root directory. There is a file called
	"application.cfg" which you can modify and it will be automatically
	installed with the build script. 

	
